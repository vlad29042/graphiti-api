#!/usr/bin/env python3
"""–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º score —è–≤–Ω–æ"""

import httpx
import asyncio
import json
from datetime import datetime

API_URL = "http://localhost:8001"

async def test_final_score():
    async with httpx.AsyncClient(timeout=60.0) as client:
        print("=== –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –Ø–í–ù–û–ï –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï SCORE ===\n")
        
        # 1. –î–æ–±–∞–≤–ª—è–µ–º —ç–ø–∏–∑–æ–¥
        print("1. –î–û–ë–ê–í–õ–ï–ù–ò–ï –≠–ü–ò–ó–û–î–ê –° –†–ê–ó–ù–û–û–ë–†–ê–ó–ù–´–ú –°–û–î–ï–†–ñ–ê–ù–ò–ï–ú...")
        episode_data = {
            "name": "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç Score",
            "content": """
            –ê–Ω–Ω–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –≤ –∫–æ–º–ø–∞–Ω–∏–∏ DeepMind.
            –û–Ω–∞ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –Ω–µ–π—Ä–æ–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞.
            –ê–Ω–Ω–∞ —Ç–∞–∫–∂–µ –ø—Ä–µ–ø–æ–¥–∞—ë—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ.
            –í –≤—ã—Ö–æ–¥–Ω—ã–µ –ê–Ω–Ω–∞ –ª—é–±–∏—Ç –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ –≤ –ø–∞—Ä–∫–µ.
            –û–Ω–∞ –≥–æ—Ç–æ–≤–∏—Ç –≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω—Å–∫–∏–µ –±–ª—é–¥–∞ –∏ —É–≤–ª–µ–∫–∞–µ—Ç—Å—è –π–æ–≥–æ–π.
            """,
            "source": "test",
            "source_description": "–§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç",
            "group_id": "final-score"
        }
        
        response = await client.post(f"{API_URL}/add_episode", json=episode_data)
        if response.status_code == 200:
            episode_id = response.json().get("episode_id")
            print(f"‚úÖ –≠–ø–∏–∑–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω: {episode_id}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
            return
        
        # 2. –ñ–¥—ë–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        print("\n2. –û–ñ–ò–î–ê–ù–ò–ï –°–û–ó–î–ê–ù–ò–Ø –≠–ú–ë–ï–î–î–ò–ù–ì–û–í...")
        await asyncio.sleep(5)
        
        # 3. –ü–æ–ª—É—á–∞–µ–º —ç–ø–∏–∑–æ–¥
        print(f"\n3. –ü–†–û–í–ï–†–ö–ê –≠–ü–ò–ó–û–î–ê {episode_id}...")
        response = await client.get(f"{API_URL}/episodes/{episode_id}")
        if response.status_code == 200:
            episode_info = response.json()['episode']
            print(f"‚úÖ –≠–ø–∏–∑–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç {episode_info['entity_count']} —Å—É—â–Ω–æ—Å—Ç–µ–π")
            print("–°—É—â–Ω–æ—Å—Ç–∏:")
            for entity in episode_info['entities_mentioned'][:5]:
                print(f"  - {entity['name']}")
            if len(episode_info['entities_mentioned']) > 5:
                print(f"  ... –∏ –µ—â—ë {len(episode_info['entities_mentioned']) - 5}")
        
        # 4. –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫ (–±–µ–∑ score)
        print("\n4. –û–ë–´–ß–ù–´–ô –ü–û–ò–°–ö (score —Å–∫—Ä—ã—Ç)...")
        search_data = {
            "query": "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏",
            "group_ids": ["final-score"],
            "num_results": 5
        }
        
        response = await client.post(f"{API_URL}/search", json=search_data)
        if response.status_code == 200:
            results = response.json()
            edges = results.get('edges', [])
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(edges)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ score):")
            for i, edge in enumerate(edges, 1):
                print(f"  {i}. {edge.get('fact')}")
        
        # 5. –ü–æ–∏—Å–∫ —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º score!
        print("\n5. –ü–û–ò–°–ö –° –Ø–í–ù–´–ú –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï–ú SCORE! üéØ")
        response = await client.post(f"{API_URL}/search_with_score", json=search_data)
        if response.status_code == 200:
            result = response.json()
            print(f"–ó–∞–ø—Ä–æ—Å: '{result['query']}'")
            print(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {result['results_count']}\n")
            
            print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –° –û–¶–ï–ù–ö–û–ô –†–ï–õ–ï–í–ê–ù–¢–ù–û–°–¢–ò:")
            print("-" * 80)
            for i, res in enumerate(result['results'], 1):
                print(f"{i}. –§–∞–∫—Ç: {res['fact']}")
                print(f"   –û—Ç: {res['source_entity']} ‚Üí –ö: {res['target_entity']}")
                print(f"   SCORE: {res['score']:.4f} ({res['score_percent']})")
                print(f"   UUID: {res['uuid']}")
                print("-" * 80)
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {response.text}")
        
        # 6. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ä–∞–∑–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
        print("\n6. –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï SCORE –° –†–ê–ó–ù–´–ú–ò –ó–ê–ü–†–û–°–ê–ú–ò...")
        test_queries = [
            "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ data science",
            "—Å–ø–æ—Ä—Ç –∏ —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", 
            "–µ–¥–∞ –∏ –∫—É–ª–∏–Ω–∞—Ä–∏—è",
            "–∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è"  # –ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        ]
        
        for query in test_queries:
            print(f"\n–ó–∞–ø—Ä–æ—Å: '{query}'")
            search_data["query"] = query
            
            response = await client.post(f"{API_URL}/search_with_score", json=search_data)
            if response.status_code == 200:
                result = response.json()
                if result['results']:
                    top_result = result['results'][0]
                    print(f"  –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {top_result['fact']}")
                    print(f"  Score: {top_result['score']:.4f} ({top_result['score_percent']})")
                else:
                    print("  –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # 7. –£–¥–∞–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
        print(f"\n7. –£–î–ê–õ–ï–ù–ò–ï –≠–ü–ò–ó–û–î–ê {episode_id}...")
        delete_data = {"episode_uuid": episode_id}
        response = await client.request("DELETE", f"{API_URL}/episodes", json=delete_data)
        if response.status_code == 200:
            print("‚úÖ –≠–ø–∏–∑–æ–¥ —É–¥–∞–ª—ë–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫
        print("\n8. –ü–†–û–í–ï–†–ö–ê –£–î–ê–õ–ï–ù–ò–Ø –ß–ï–†–ï–ó –ü–û–ò–°–ö...")
        response = await client.post(f"{API_URL}/search_with_score", json=search_data)
        if response.status_code == 200:
            result = response.json()
            if result['results_count'] == 0:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã - –ø–æ–∏—Å–∫ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            else:
                print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ {result['results_count']} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è")
        
        print("\n‚úÖ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–Å–ù!")
        print("\nüéØ –í–´–í–û–î–´ –û SCORE:")
        print("1. Score - —ç—Ç–æ –∫–æ—Å–∏–Ω—É—Å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ –º–µ–∂–¥—É –≤–µ–∫—Ç–æ—Ä–∞–º–∏ (0 –¥–æ 1)")
        print("2. –ß–µ–º –±–ª–∏–∂–µ –∫ 1, —Ç–µ–º –≤—ã—à–µ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –±–ª–∏–∑–æ—Å—Ç—å")
        print("3. FalkorDB –≤—ã—á–∏—Å–ª—è–µ—Ç: (2 - vec.cosineDistance(v1, v2))/2")
        print("4. –ü–æ—Ä–æ–≥ –æ—Ç—Å–µ—á–µ–Ω–∏—è –æ–±—ã—á–Ω–æ 0.5 (50%)")
        print("5. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è –ø–æ score DESC")

if __name__ == "__main__":
    asyncio.run(test_final_score())